name: Build ThreeDICOM (macOS)

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - ci/*

env:
  BUILD_DIR: ../ThreeDICOM-sb
  CMAKE_GENERATOR: Ninja
  HOMEBREW_NO_AUTO_UPDATE: "1"

jobs:
  build-macos:
    runs-on: macos-13

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          brew install cmake ninja qt@5 openssl ccache
          echo "export PATH=\"$(brew --prefix qt@5)/bin:$PATH\"" >> $GITHUB_ENV
          echo "export CCACHE_DIR=\"$HOME/.ccache\"" >> $GITHUB_ENV
          echo "export CC=\"ccache clang\"" >> $GITHUB_ENV
          echo "export CXX=\"ccache clang++\"" >> $GITHUB_ENV

      - name: Free additional disk space
        run: |
          rm -rf "$HOME"/Library/Caches/Homebrew
          rm -rf "$HOME"/Library/Developer/Xcode/DerivedData
          sudo rm -rf /Library/Developer/CoreSimulator/Caches

      - name: Show disk usage
        run: df -h

      - name: Configure SuperBuild
        run: |
          SDK_PATH=$(xcrun --sdk macosx --show-sdk-path)
          echo "SDKROOT=$SDK_PATH" >> "$GITHUB_ENV"
          cmake -U"*LibFFI*" -S . -B "$BUILD_DIR" \
            -G "$CMAKE_GENERATOR" \
            -C ThreeDICOMApp.cmake \
            -DSlicer_MAIN_PROJECT=ThreeDICOMApp \
            -DQt5_DIR=$(brew --prefix qt@5)/lib/cmake/Qt5 \
            -DSlicer_USE_SYSTEM_OpenSSL=ON \
            -DOPENSSL_ROOT_DIR=$(brew --prefix openssl) \
            -DSlicer_USE_SYSTEM_LibFFI=OFF \
            -DSlicer_VTK_SMP_IMPLEMENTATION_TYPE=Sequential \
            -DSlicer_BUILD_SimpleITK=OFF \
            -DSlicer_BUILD_ITKPython=OFF \
            -DSlicer_BUILD_TESTING=OFF \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=13.0 \
            -DCMAKE_OSX_SYSROOT="$SDK_PATH"

      - name: Build ThreeDICOMApp
        run: cmake --build "$BUILD_DIR" --target Slicer -- -j4

      - name: Collect failure diagnostics
        if: failure()
        run: |
          set -euo pipefail
          BUILD_DIR_ABS="$(cd "$BUILD_DIR" && pwd)"
          REPORT_DIR="$GITHUB_WORKSPACE/failure-diagnostics"
          mkdir -p "$REPORT_DIR"

          {
            echo "# System"
            date || true
            uname -a || true
            sw_vers || true
            echo
            echo "# Xcode"
            xcode-select --print-path || true
            xcodebuild -version || true
            xcrun --sdk macosx --show-sdk-path || true
            echo
            echo "# Toolchain"
            clang --version || true
            cc --version || true
            echo
            echo "# Environment"
            env | sort
          } > "$REPORT_DIR/system-info.txt"

          # Copy key build logs if they exist
          for target in \
            "$BUILD_DIR_ABS/PCRE2-build/config.log" \
            "$BUILD_DIR_ABS/PCRE2_configure_step_output.txt" \
            "$BUILD_DIR_ABS/PCRE2_configure_step_error.txt" \
            "$BUILD_DIR_ABS/CMakeFiles/CMakeOutput.log" \
            "$BUILD_DIR_ABS/CMakeFiles/CMakeError.log" \
            "$BUILD_DIR_ABS/Slicer-build/CMakeFiles/CMakeOutput.log" \
            "$BUILD_DIR_ABS/Slicer-build/CMakeFiles/CMakeError.log" \
            "$BUILD_DIR_ABS/Slicer-build/PCRE2-prefix/src/PCRE2-stamp/PCRE2-configure-*.log"
          do
            for file in $target; do
              if [ -f "$file" ]; then
                rel="${file#"$BUILD_DIR_ABS/"}"
                dest="$REPORT_DIR/$rel"
                mkdir -p "$(dirname "$dest")"
                cp "$file" "$dest"
              fi
            done
          done

          # Summaries for quick scan in the job log
          {
            echo "# PCRE2 config.log (tail)"
            [ -f "$BUILD_DIR_ABS/PCRE2-build/config.log" ] && tail -n 200 "$BUILD_DIR_ABS/PCRE2-build/config.log"
            echo
            echo "# PCRE2 configure stdout (tail)"
            [ -f "$BUILD_DIR_ABS/PCRE2_configure_step_output.txt" ] && tail -n 200 "$BUILD_DIR_ABS/PCRE2_configure_step_output.txt"
            echo
            echo "# PCRE2 configure stderr (tail)"
            [ -f "$BUILD_DIR_ABS/PCRE2_configure_step_error.txt" ] && tail -n 200 "$BUILD_DIR_ABS/PCRE2_configure_step_error.txt"
          } >> "$REPORT_DIR/system-info.txt"

          echo "--- failure-diagnostics/system-info.txt ---"
          cat "$REPORT_DIR/system-info.txt"

      - name: Upload failure diagnostics
        if: failure()
        uses: actions/upload-artifact@v5
        with:
          name: failure-diagnostics
          path: failure-diagnostics

      - name: Package ThreeDICOMApp
        run: cmake --build "$BUILD_DIR" --target package

      - name: Collect artifacts
        run: |
          mkdir -p artifacts
          ls -l "$BUILD_DIR"/Slicer-build
          find "$BUILD_DIR"/Slicer-build -name '*.dmg' -maxdepth 1 -exec cp {} artifacts/ \;
          tar -C "$BUILD_DIR"/Slicer-build -czf artifacts/ThreeDICOMApp-build-tree.tgz .

      - name: Upload artifacts
        uses: actions/upload-artifact@v5
        with:
          name: ThreeDICOMApp-macos
          path: artifacts
          if-no-files-found: error
